/// UserEntity
///
/// Business Rules:
/// - Add the main business rules or invariants enforced by this class.

import 'package:equatable/equatable.dart';

/// Represents a user in the Fix It application.
///
/// This entity contains all user-related information including authentication
/// details, profile information, and user type classification. The [UserEntity]
/// serves as the core business object for all user operations across the app.
///
/// The [UserEntity] supports two distinct user types:
/// - `client`: Customers who browse and book home services
/// - `provider`: Service professionals who offer and fulfill services
///
/// **Business Rules:**
/// - [id] must be unique across the system (generated by Firebase Auth)
/// - [email] must be valid format and unique
/// - [userType] is immutable after account creation
/// - [profession] is required when [userType] is 'provider'
/// - [phoneNumber] is required for providers to enable customer communication
///
/// **Data Validation:**
/// - Email format: RFC 5322 compliant
/// - Phone format: E.164 international format (e.g., +1234567890)
/// - User type: Must be exactly 'client' or 'provider'
/// - Profession: Must match predefined service categories for providers
///
/// Example:
/// ```dart
/// // Creating a client user
/// final clientUser = UserEntity(
///   id: 'auth_user_123',
///   email: 'john.doe@example.com',
///   fullName: 'John Doe',
///   userType: 'client',
///   phoneNumber: '+1234567890',
///   createdAt: DateTime.now(),
///   updatedAt: DateTime.now(),
/// );
///
/// // Creating a provider user
/// final providerUser = UserEntity(
///   id: 'auth_provider_456',
///   email: 'jane.smith@example.com',
///   fullName: 'Jane Smith',
///   userType: 'provider',
///   profession: 'plumbing',
///   phoneNumber: '+1987654321',
///   profilePictureUrl: 'https://example.com/profile.jpg',
///   createdAt: DateTime.now(),
///   updatedAt: DateTime.now(),
/// );
///
/// // Using helper methods
/// if (user.isProvider) {
///   print('Service provider: ${user.profession}');
/// } else if (user.isClient) {
///   print('Customer: ${user.fullName}');
/// }
/// ```
class UserEntity extends Equatable {
  /// Unique identifier for the user.
  ///
  /// This ID is generated by Firebase Authentication and serves as the
  /// primary key for all user-related operations. It remains constant
  /// throughout the user's lifecycle and is used to link data across
  /// different collections (bookings, payments, reviews).
  final String id;

  /// User's email address used for authentication and communication.
  ///
  /// Must be a valid email format (RFC 5322 compliant) and unique across
  /// the system. This email is used for:
  /// - Primary authentication method
  /// - Password reset notifications
  /// - Booking confirmations and updates
  /// - Important account notifications
  final String email;

  /// Full display name of the user.
  ///
  /// Used throughout the app for personalization and display purposes.
  /// For service providers, this name appears in service listings and
  /// customer communications. Should be the user's real name for trust
  /// and verification purposes.
  ///
  /// **Constraints:**
  /// - Minimum 2 characters
  /// - Maximum 50 characters
  /// - No special characters except spaces, hyphens, and apostrophes
  final String fullName;

  /// Optional phone number for direct communication.
  ///
  /// **For Clients:** Optional but recommended for booking confirmations
  /// **For Providers:** Required to enable customer communication
  ///
  /// Must be in E.164 international format (e.g., +1234567890).
  /// Used for:
  /// - SMS notifications for booking updates
  /// - Emergency contact during service delivery
  /// - Two-factor authentication (future feature)
  final String? phoneNumber;

  /// User type classification that determines app behavior and features.
  ///
  /// **Valid values:**
  /// - `'client'`: Customers who browse and book services
  /// - `'provider'`: Service professionals who offer services
  ///
  /// **Behavior differences:**
  /// - Clients: Can browse services, make bookings, leave reviews
  /// - Providers: Can create service listings, accept bookings, manage schedule
  ///
  /// **Important:** This field is immutable after account creation.
  /// To change user type, a new account must be created.
  final String userType;

  /// Professional specialization for service providers.
  ///
  /// **Required when [userType] is 'provider'**
  /// **Must be null when [userType] is 'client'**
  ///
  /// Must match one of the predefined service categories:
  /// - 'plumbing' - Water and pipe related services
  /// - 'electrical' - Electrical installations and repairs
  /// - 'cleaning' - Home and office cleaning services
  /// - 'painting' - Interior and exterior painting
  /// - 'carpentry' - Furniture assembly and wood work
  /// - 'appliance_repair' - Kitchen and home appliance repairs
  /// - 'hvac' - Heating, ventilation, and air conditioning
  /// - 'gardening' - Landscaping and plant care
  ///
  /// This field determines which service requests the provider receives.
  final String? profession;

  /// URL to the user's profile picture stored in Firebase Storage.
  ///
  /// **Optional for all users**
  /// 
  /// When provided, should be a valid HTTPS URL pointing to:
  /// - Firebase Storage object for uploaded images
  /// - Gravatar URL for email-based avatars
  /// - Social provider profile picture (Google, Apple)
  ///
  /// **Image requirements:**
  /// - Format: JPEG, PNG, or WebP
  /// - Size: Maximum 5MB
  /// - Dimensions: Recommended 400x400px minimum
  ///
  /// If null, the app will display a default avatar based on user initials.
  final String? profilePictureUrl;

  /// Firebase Authentication token for API requests.
  ///
  /// **Typically managed automatically by Firebase SDK**
  /// 
  /// This token is used for:
  /// - Authenticating API requests to backend services
  /// - Validating user permissions in Firestore security rules
  /// - Accessing protected resources
  ///
  /// The token is automatically refreshed by Firebase and should not
  /// be manually managed in most cases.
  final String? token;

  /// Timestamp when the user account was first created.
  ///
  /// Set once during user registration and never modified.
  /// Used for:
  /// - Account age calculations
  /// - Analytics and reporting
  /// - Audit trails
  /// - User lifecycle tracking
  final DateTime createdAt;

  /// Timestamp when the user data was last modified.
  ///
  /// Updated whenever any user information changes, including:
  /// - Profile information updates
  /// - Profile picture changes
  /// - Contact information modifications
  ///
  /// Used for:
  /// - Data synchronization
  /// - Cache invalidation
  /// - Conflict resolution in offline scenarios
  final DateTime updatedAt;

  /// Creates a new [UserEntity] with the required information.
  ///
  /// **Validation performed:**
  /// - [id] must not be empty
  /// - [email] must be valid format
  /// - [fullName] must not be empty
  /// - [userType] must be 'client' or 'provider'
  /// - [profession] must be provided for providers
  /// - [phoneNumber] format validation if provided
  ///
  /// Throws [ArgumentError] if validation fails.
  const UserEntity({
    required this.id,
    required this.email,
    required this.fullName,
    this.phoneNumber,
    required this.userType,
    this.profession,
    this.profilePictureUrl,
    this.token,
    required this.createdAt,
    required this.updatedAt,
  });

  /// Creates a copy of this [UserEntity] with the given fields replaced.
  ///
  /// This method is commonly used for:
  /// - Updating user profile information
  /// - Adding profile pictures after registration
  /// - Modifying contact information
  /// - Updating last modified timestamp
  ///
  /// **Note:** [id], [userType], and [createdAt] should typically not be changed.
  ///
  /// Example:
  /// ```dart
  /// final updatedUser = existingUser.copyWith(
  ///   fullName: 'New Full Name',
  ///   phoneNumber: '+1987654321',
  ///   updatedAt: DateTime.now(),
  /// );
  /// ```
  UserEntity copyWith({
    String? id,
    String? email,
    String? fullName,
    String? phoneNumber,
    String? userType,
    String? profession,
    String? profilePictureUrl,
    String? token,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return UserEntity(
      id: id ?? this.id,
      email: email ?? this.email,
      fullName: fullName ?? this.fullName,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      userType: userType ?? this.userType,
      profession: profession ?? this.profession,
      profilePictureUrl: profilePictureUrl ?? this.profilePictureUrl,
      token: token ?? this.token,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  /// Returns true if this user is a client (customer).
  ///
  /// Convenience getter to check user type without string comparison.
  /// Clients can browse services, make bookings, and leave reviews.
  bool get isClient => userType == 'client';

  /// Returns true if this user is a service provider.
  ///
  /// Convenience getter to check user type without string comparison.
  /// Providers can create service listings, accept bookings, and manage schedules.
  bool get isProvider => userType == 'provider';

  /// Returns true if the user has a complete profile.
  ///
  /// A complete profile includes:
  /// - All required fields are filled
  /// - Phone number is provided for providers
  /// - Valid profession for providers
  bool get hasCompleteProfile {
    if (isProvider) {
      return phoneNumber != null && 
             phoneNumber!.isNotEmpty && 
             profession != null && 
             profession!.isNotEmpty;
    }
    return true; // Clients only need basic information
  }

  /// Returns the user's display name for UI purposes.
  ///
  /// Uses the full name, or falls back to email username if name is empty.
  String get displayName {
    if (fullName.isNotEmpty) {
      return fullName;
    }
    // Extract username from email as fallback
    return email.split('@').first;
  }

  /// Returns the user's initials for avatar display.
  ///
  /// Extracts first letter of each word in the full name.
  /// Returns first two characters of email if name is not available.
  String get initials {
    if (fullName.isNotEmpty) {
      final parts = fullName.trim().split(' ');
      if (parts.length >= 2) {
        return '${parts.first[0]}${parts.last[0]}'.toUpperCase();
      }
      return fullName[0].toUpperCase();
    }
    return email.substring(0, 2).toUpperCase();
  }

  @override
  List<Object?> get props => [
        id,
        email,
        fullName,
        phoneNumber,
        userType,
        profession,
        profilePictureUrl,
        token,
        createdAt,
        updatedAt,
      ];

  @override
  String toString() {
    return 'UserEntity(id: $id, email: $email, fullName: $fullName, '
           'userType: $userType, profession: $profession)';
  }
}

