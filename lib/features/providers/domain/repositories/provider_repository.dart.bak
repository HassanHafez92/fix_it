import 'package:dartz/dartz.dart';

import '../../../../core/error/failures.dart';
import '../entities/provider_entity.dart';
import '../entities/review_entity.dart';

/// ProviderRepository
///
/// Domain repository interface for provider-related operations.
///
/// Business Rules:
///  - Implementations should encapsulate data source selection and caching logic.
abstract class ProviderRepository {
  /// Search for providers matching optional filters.
  ///
  /// Parameters:
  ///  - `query`: Optional text query to match provider name or service.
  ///  - `serviceCategory`: Optional category identifier to filter providers.
  ///  - `latitude`/`longitude`: Optional coordinates to bias results by location.
  ///  - `radius`: Optional search radius (km).
  ///  - `minRating`: Optional minimum rating filter.
  ///  - `availableAt`: Optional date/time to filter providers available at that time.
  ///  - `maxPrice`: Optional maximum price filter.
  ///  - `sort`: Optional sorting parameter.
  ///
  /// Returns: Either a `Failure` or a list of matching `ProviderEntity`.
  Future<Either<Failure, List<ProviderEntity>>> searchProviders({
    String? query,
    String? serviceCategory,
    double? latitude,
    double? longitude,
    double? radius,
    double? minRating,
    DateTime? availableAt,
    double? maxPrice,
    String? sort,
  });
  Future<Either<Failure, ProviderEntity>> getProviderDetails(String providerId);
  Future<Either<Failure, List<ReviewEntity>>> getProviderReviews(
      String providerId);
  Future<Either<Failure, ReviewEntity>> submitProviderReview(
      {required String providerId,
      required double rating,
      required String comment,
      String? bookingId});
  Future<Either<Failure, List<ProviderEntity>>> getNearbyProviders({
    required double latitude,
    required double longitude,
    double radius = 10.0,
  });
  Future<Either<Failure, List<ProviderEntity>>> getFeaturedProviders();
  Future<Either<Failure, void>> addProviderToFavorites(String providerId);
  Future<Either<Failure, void>> removeProviderFromFavorites(String providerId);
  Future<Either<Failure, List<ProviderEntity>>> getFavoriteProviders();
}
