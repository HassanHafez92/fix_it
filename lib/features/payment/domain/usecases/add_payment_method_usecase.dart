import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../../../../core/usecases/usecase.dart';
import '../entities/payment_method_entity.dart';
import '../repositories/payment_methods_repository.dart';

/// Use case for adding a new payment method.
/// 
/// This use case encapsulates the business logic for adding payment methods,
/// including validation and business rules.
class AddPaymentMethodUseCase implements UseCase<PaymentMethodEntity, AddPaymentMethodParams> {
  final PaymentMethodsRepository repository;

  AddPaymentMethodUseCase(this.repository);

  @override
  Future<Either<Failure, PaymentMethodEntity>> call(AddPaymentMethodParams params) async {
    // Validate input parameters
    final validationResult = _validateParams(params);
    if (validationResult != null) {
      return Left(ValidationFailure(validationResult));
    }

    // Create payment method entity
    final paymentMethod = PaymentMethodEntity(
      id: '', // Will be generated by the repository/backend
      userId: params.userId,
      type: params.type,
      displayName: params.displayName,
      lastFourDigits: params.lastFourDigits,
      cardBrand: params.cardBrand,
      expiryMonth: params.expiryMonth,
      expiryYear: params.expiryYear,
      isDefault: params.isDefault,
      isActive: true,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    // Add payment method through repository
    return await repository.addPaymentMethod(paymentMethod);
  }

  /// Validates the input parameters according to business rules
  String? _validateParams(AddPaymentMethodParams params) {
    if (params.userId.isEmpty) {
      return 'User ID cannot be empty';
    }

    if (params.displayName.isEmpty) {
      return 'Display name cannot be empty';
    }

    if (params.lastFourDigits.isEmpty) {
      return 'Last four digits cannot be empty';
    }

    // Validate credit/debit card specific fields
    if (params.type == PaymentMethodType.creditCard || params.type == PaymentMethodType.debitCard) {
      if (params.cardBrand == null || params.cardBrand!.isEmpty) {
        return 'Card brand is required for credit/debit cards';
      }

      if (params.expiryMonth == null || params.expiryMonth! < 1 || params.expiryMonth! > 12) {
        return 'Valid expiry month is required for credit/debit cards';
      }

      if (params.expiryYear == null || params.expiryYear! < DateTime.now().year) {
        return 'Valid expiry year is required for credit/debit cards';
      }

      // Check if card is expired
      final now = DateTime.now();
      final expiry = DateTime(params.expiryYear!, params.expiryMonth!);
      if (now.isAfter(expiry)) {
        return 'Card is expired';
      }
    }

    return null; // No validation errors
  }
}

/// Parameters for the AddPaymentMethodUseCase
class AddPaymentMethodParams {
  final String userId;
  final PaymentMethodType type;
  final String displayName;
  final String lastFourDigits;
  final String? cardBrand;
  final int? expiryMonth;
  final int? expiryYear;
  final bool isDefault;

  const AddPaymentMethodParams({
    required this.userId,
    required this.type,
    required this.displayName,
    required this.lastFourDigits,
    this.cardBrand,
    this.expiryMonth,
    this.expiryYear,
    this.isDefault = false,
  });
}
